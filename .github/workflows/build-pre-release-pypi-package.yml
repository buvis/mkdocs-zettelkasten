---
name: Build and upload pre-relase PyPI package

on:
  push:
    branches: ["feature/*", "develop"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment: release-test-pypi

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for dynamic versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry and dynamic versioning plugin
        run: |
          pip install "poetry>=1.8.0" "poetry-dynamic-versioning[plugin]>=1.0.0"

      - name: Install project dependencies
        run: poetry install --no-interaction

      - name: Build package with dynamic version
        run: poetry build -v
        env:
          PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring

      - name: Get dynamic version
        id: get_version
        run: echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Check if version exists on Test PyPI
        id: version_check
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          PKG="mkdocs-zettelkasten"
          if curl -fsS "https://test.pypi.org/pypi/$PKG/json" | jq -e ".releases | has(\"$VERSION\")" > /dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to Test PyPI
        if: steps.version_check.outputs.exists == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          skip-existing: false
          verbose: true

      - name: Verify installation from Test PyPI
        if: steps.version_check.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple "mkdocs-zettelkasten==$VERSION"
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Retry build by creating empty commit
        if: steps.version_check.outputs.exists == 'true'
        run: |
          git config --global user.email "ci-bot@github.com"
          git config --global user.name "CI Bot"
          git commit --allow-empty -m "chore: retry build to generate new version"
          git push

      - name: Clean up local build artifacts
        if: always()
        run: rm -rf dist/*

      - name: Delete all workflow artifacts
        if: always()
        uses: geekyeggo/delete-artifact@v5
