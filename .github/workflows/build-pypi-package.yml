---
name: Build & Release PyPI Package

on:
  push:
    branches: [main]
    tags: ["*"]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  attestations: write
  contents: read
  id-token: write

jobs:
  build-package:
    name: Build & verify package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for dynamic versioning to see all tags
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Poetry & dynamic versioning plugin
        run: |
          pip install "poetry>=1.8.0" "poetry-dynamic-versioning[plugin]>=1.0.0"
      - name: Build and inspect package
        uses: hynek/build-and-inspect-python-package@v2
        with:
          attest-build-provenance-github: "true"

  release-pypi:
    name: Publish released package to PyPI
    environment: release-pypi
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event.action == 'published' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Poetry & dynamic versioning plugin
        run: |
          pip install "poetry>=1.8.0" "poetry-dynamic-versioning[plugin]>=1.0.0"
      - name: Check version change
        uses: raven-wing/did-python-package-version-change@v1
        id: did-version-change
      - name: Download built package
        if: steps.did-version-change.outputs.is_version_greater == 'true'
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist
      - name: Get dynamic version
        id: get_version
        run: echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT
      - name: Check if version exists on PyPI
        id: version_check
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          PKG="mkdocs-zettelkasten"
          if curl -fsS "https://pypi.org/pypi/$PKG/json" | jq -e ".releases | has(\"$VERSION\")" > /dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Publish to PyPI
        if: steps.did-version-change.outputs.is_version_greater == 'true' && steps.version_check.outputs.exists == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Retry build by creating empty commit
        if: steps.did-version-change.outputs.is_version_greater == 'true' && steps.version_check.outputs.exists == 'true'
        run: |
          git config --global user.email "ci-bot@github.com"
          git config --global user.name "CI Bot"
          git commit --allow-empty -m "chore: retry build to generate new version"
          git push
      - name: Clean up local build artifacts
        if: always()
        run: rm -rf dist/*
      - name: Delete all workflow artifacts
        if: always()
        uses: geekyeggo/delete-artifact@v5

  release-test-pypi:
    name: Publish in-dev package to test.pypi.org
    environment: release-test-pypi
    runs-on: ubuntu-latest
    needs: build-package
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Poetry & dynamic versioning plugin
        run: |
          pip install "poetry>=1.8.0" "poetry-dynamic-versioning[plugin]>=1.0.0"
      - name: Check version change
        uses: raven-wing/did-python-package-version-change@v1
        id: did-version-change
      - name: Download built package
        if: steps.did-version-change.outputs.is_version_greater == 'true'
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist
      - name: Get dynamic version
        id: get_version
        run: echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT
      - name: Check if version exists on Test PyPI
        id: version_check
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          PKG="mkdocs-zettelkasten"
          if curl -fsS "https://test.pypi.org/pypi/$PKG/json" | jq -e ".releases | has(\"$VERSION\")" > /dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Publish to Test PyPI
        if: steps.did-version-change.outputs.is_version_greater == 'true' && steps.version_check.outputs.exists == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
      - name: Retry build by creating empty commit
        if: steps.did-version-change.outputs.is_version_greater == 'true' && steps.version_check.outputs.exists == 'true'
        run: |
          git config --global user.email "ci-bot@github.com"
          git config --global user.name "CI Bot"
          git commit --allow-empty -m "chore: retry build to generate new version"
          git push
      - name: Clean up local build artifacts
        if: always()
        run: rm -rf dist/*
      - name: Delete all workflow artifacts
        if: always()
        uses: geekyeggo/delete-artifact@v5
